#! /usr/bin/perl -w

# bacula-purge-unused 1.4
# Copyright 2014-2016 <kjetil.homme@redpill-linpro.com>
# Released under GPLv3 or later versions

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib/site_perl";

use DBI;
use XML::Simple;
use Time::Local;
use Getopt::Long qw(:config bundling no_ignore_case require_order);
use Bacula::DatabaseConfig;
use Data::Dumper;

my $datadirectory = '/srv/bacula/data';
my $fuzz = "8 hour";
my $except_job;
my $error_only;
my $remove;
my $noconfirm;
my $debug;
my $truncate;
my $storage;
my $liststorage;
my $exportremove;
my $dryrun;

sub usage {
    print STDERR <<"_END_";
Usage: $0 [--dryrun] [--liststorage] [--debug] [--truncate] [--remove] [--exportremove] [--noconfirm] [--error-only] [options]

Options:
  --except-job N[,M...]]
      for running jobs (may affect error-only status)
  --storage ID
      select specific storage ID
 --fuzz-days N
      only report files which are more than N days beyond expiry date.
 --error-only
      only report/remove files which only contain failed jobs
 --data-directory DIR
      where data lives (default /srv/bacula/data)

_END_

    print STDERR Bacula::DatabaseConfig::HELP_MESSAGE();
    exit(64);
}

my $dbconfig = new Bacula::DatabaseConfig;

GetOptions("debug" => \$debug,
           "data-directory|d=s" => \$datadirectory,
           "except-job=i" => \$except_job,
	   "storage=i" => \$storage,
           "fuzz-days=i" => sub { $fuzz = $_[1] * 86400 },
           "error-only" => \$error_only,
           "remove" => \$remove,
	   "exportremove" => \$exportremove,
	   "noconfirm" => \$noconfirm,
	   "dryrun" => \$dryrun,
	   "liststorage" => \$liststorage,
           "truncate" => \$truncate)
    or usage();

die "--truncate is not implemented\n" if $truncate;

die "--remove and --exportremove are mutually excluded" if $remove && $exportremove;

sub failed {
    $_[0] ne 'T' && $_[0] ne 'W';
}

sub list_storage {
    my ($dbconfig) = @_;

    my $dbh = $dbconfig->connect();
    
    my $q = $dbh->prepare(
        "SELECT storageid, name " .
        "FROM storage");

    $q->execute();
    
    my $all = $q->fetchall_arrayref;

    printf("StorageID|Name of the storage\n---------+----------------------\n");
    for my $r (@{$all}) {
        my ($idstor, $name) = @{$r};
	printf("%- 9i|%s\n", $idstor, $name);
    }
    exit(0);
}

sub list_error_only {
    my ($dbconfig) = @_;

    my %error_vols;

    my $dbh = $dbconfig->connect();
    # $except_job is a command line argument
    
    my $q = $dbh->prepare(
        "SELECT m.VolumeName, j.JobStatus ".
        "FROM Media m JOIN JobMedia jm ON m.MediaId = jm.MediaId AND m.MediaType = 'File' ".
        "JOIN Job j ON j.JobId = jm.JobId ".
        (($except_job || $storage ) ? "WHERE " : "" ) . ($except_job ? "j.JobId NOT IN ($except_job) " : "") .
	($storage ? "m.storageid = $storage " : "") .
        "GROUP BY m.VolumeName, j.JobStatus");

    my $detail = $dbh->prepare(
        "SELECT volumename, lastwritten, volbytes, volstatus, volretention ".
        "FROM media" .
	($storage ? "WHERE storageid = $storage" : ""));

    $q->execute();
    my $all = $q->fetchall_arrayref;
    my %media;
    for my $r (@{$all}) {
        my ($vol, $status) = @{$r};
        # Consider a running job to be a (future) successful job
        $status = 'T' if ($status eq 'R');
        $media{$vol} = $status
            if !defined $media{$vol} || failed($media{$vol});
    }

    for my $vol (keys %media) {
        if (failed($media{$vol})) {
            # make structured data when/if we need it
            $error_vols{$vol} = "error-only";
        }
    }
    return %error_vols;
}

sub list_recyclable {
    my ($dbconfig) = @_;

    my %recyclable;

    my $dbh = $dbconfig->connect();
    my $recycle = $dbh->prepare(
        "SELECT volumename, lastwritten, volbytes, volstatus, volretention ".
        "FROM media ".
        "WHERE mediatype = 'File' AND ".
        "   lastwritten + interval '$fuzz' < ".
        "      NOW() -  volretention * interval '1 second'" .
	($storage ? "AND storageid = $storage" : ""));

    $recycle->execute();
    my $vols = $recycle->fetchall_hashref('volumename');
    for my $vol (sort {
                          $vols->{$a}->{lastwritten} cmp $vols->{$b}->{lastwritten}
                      } keys %{$vols})
    {
        # make structured data when/if we need it
        my $info = "$vols->{$vol}->{volstatus} $vols->{$vol}->{lastwritten}  $vols->{$vol}->{volbytes}";
        $recyclable{$vol} = $info;
    }
    return %recyclable;
}

if ($liststorage) {
    list_storage($dbconfig);
}

my %deletable = list_error_only($dbconfig);
unless ($error_only) {
    %deletable = (%deletable, list_recyclable($dbconfig));
}

for my $vol (sort keys %deletable) {
    my $file = "$datadirectory/$vol";
    printf("%-22s %s%s\n", $vol, $deletable{$vol}, 
           (-l $file ? " -> " . readlink($file) : ""));
}
my $dbh;
if (!$dryrun && ($remove || $exportremove)) {
    my $baculaconf = (grep { -e $_ } qw(/etc/bareos/bareos-dir.conf /etc/bacula/bacula-dir.conf))[0];

    if ($baculaconf) {
        if (open(my $conf, $baculaconf)) {
            my ($writeuser, $writepassword);
            while (<$conf>) {
                chomp;
                s/(^|\s+)#.*//;
                if (/dbuser\s*=\s*"(.*?)"/) {
                    $writeuser = $1;
                }
                if (/dbpassword\s*=\s*"(.*?)"/) {
                    $writepassword = $1;
                }
            }
            close($conf);
            if (defined $writeuser && defined $writepassword) {
                $dbconfig->disconnect();
                $dbconfig = new Bacula::DatabaseConfig('database-user' => $writeuser,
                                                       'database-password' => $writepassword);
            }
        } else {
            # not necessarily fatal, the password in the configuration may
            # have update access
            warn "$baculaconf: $!\n";
        }
    }

    my $attr = {
	RaiseError => 1, # Make database errors fatal to script
	AutoCommit => 0, # Prevent statements from committing
	# their transactions.
    };
    $dbh = $dbconfig->connect($attr);
    $dbh->{AutoCommit} = 0;
}

if ($remove) {
    unless (-d $datadirectory) {
        die "$datadirectory: Directory not found\n";
    }
    
    $| = 1;
    if(!$noconfirm){
	print "OK to remove volumes? ";
	my $ans = <STDIN>;
	if ($ans !~ /^y/i) {
	    print "aborting.\n";
	    exit(0);
	}
    }
    print "Removing from filesystem\n";
    for my $vol (keys %deletable) {
        if (-f "$datadirectory/$vol") {
            if (-l "$datadirectory/$vol") {
                my $target = readlink("$datadirectory/$vol");
                my $filedir = "$datadirectory/$vol";
                $filedir =~ s:/[^/]*?$::;
                $target = "$filedir/$target" unless $target =~ m:^/:;
		if($dryrun){
		    printf("remove link '%s'\n", $target);
		}
		else{
		    unlink($target) || warn "$target: $!\n";
		}
            }
	    if($dryrun){
		printf("remove '%s/%s'\n", $datadirectory,$vol);
	    }
	    else{
		unlink("$datadirectory/$vol") || warn "$vol: $!\n";
	    }
        } else {
            warn "$vol: no such file\n";
        }
    }
}
if ($exportremove){
    print "export volumes for Removing from filesystem\n";
    print "-----------------------------\n";
    
    for my $vol (keys %deletable) {
	printf("rm -f %s/%s\n",$datadirectory,$vol);
    }
    print "-----------------------------\n";
}
if($dryrun){
    print "dryrun: not removing from database\n";
}
elsif ($remove || $exportremove){
    print "Removing from database\n";
    print ".. deleting from Media\n";
    my $delete_media = $dbh->prepare(
	"DELETE FROM media WHERE " .
	($storage ? "storageid = $storage AND " : "") .
	"volumename IN ('" .
	join("','", keys %deletable) . "')");
    my $rv = $delete_media->execute() or die $delete_media->errstr;
    print ".... $rv rows deleted\n";
    
    # now do the cascading delete
    
    print ".. deleting from JobMedia\n";
    my $delete_jobmedia = $dbh->prepare(
	"DELETE FROM jobmedia
	    WHERE mediaid NOT IN (SELECT mediaid FROM Media)");
    $rv = $delete_jobmedia->execute() or die $delete_jobmedia->errstr;
    print ".... $rv rows deleted\n";
    
    print ".. deleting from File\n";
    my $delete_file = $dbh->prepare(
	"DELETE FROM file
	    WHERE jobid NOT IN (SELECT jobid FROM jobmedia)");
    $rv = $delete_file->execute() or die $delete_file->errstr;
    print ".... $rv rows deleted\n";

    $dbh->commit() or die $dbh->errstr;
    print "All done.\n";
}

